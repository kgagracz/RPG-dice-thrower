package pl.polsl.kg301743.dicethrower.view;

import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import pl.polsl.kg301743.dicethrower.controller.Controller;
import pl.polsl.kg301743.dicethrower.model.HandledException;
import pl.polsl.kg301743.dicethrower.model.Model;

/**
 * Class representing GUI model of appllication. Responsible for handling events and displaying Swing components
 * @author Krystian Gagracz
 * @version 1.0.0
 */
public class GUI extends javax.swing.JFrame {

    final private Model model;
    final private Controller controller;
    private DefaultListModel resultsListModel;
    
    /**
     * Creates new form GUI
     */
    public GUI(Model model, Controller controller, String args[]) {
        this.model = model;
        this.controller = controller;
        this.resultsListModel = new DefaultListModel();
        initComponents();
        TextFieldThrowType.setText(args[0]);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelThrowType = new javax.swing.JLabel();
        TextFieldThrowType = new javax.swing.JTextField();
        ButtonThrow = new javax.swing.JButton();
        ScrollableListResults = new javax.swing.JScrollPane();
        ListResults = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelThrowType.setText("Typ rzutu");

        TextFieldThrowType.setToolTipText("Wprowadź typ rzutu (np. 2k10)");
        TextFieldThrowType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldThrowTypeActionPerformed(evt);
            }
        });

        ButtonThrow.setMnemonic('R');
        ButtonThrow.setText("Rzuć");
        ButtonThrow.setToolTipText("Rzuć kością i wyświetl wyniki");
        ButtonThrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonThrowActionPerformed(evt);
            }
        });

        ListResults.setToolTipText("Lista wszystkich wyników rzutów.");
        ScrollableListResults.setViewportView(ListResults);
        ListResults.getAccessibleContext().setAccessibleName("ListResults");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelThrowType)
                        .addGap(18, 18, 18)
                        .addComponent(TextFieldThrowType, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ScrollableListResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(ButtonThrow)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelThrowType)
                    .addComponent(TextFieldThrowType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonThrow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ScrollableListResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        LabelThrowType.getAccessibleContext().setAccessibleName("LabelThrowType");
        TextFieldThrowType.getAccessibleContext().setAccessibleName("TextFieldThrowType");
        ButtonThrow.getAccessibleContext().setAccessibleName("ButtonThrow");
        ScrollableListResults.getAccessibleContext().setAccessibleName("ScrollableListResults");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called after changing TextField value
     */
    private void TextFieldThrowTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldThrowTypeActionPerformed

    }//GEN-LAST:event_TextFieldThrowTypeActionPerformed
       
    /**
     * This method is called after clicking ButtonThrow
     */
    private void ButtonThrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonThrowActionPerformed
        //clearing components
        this.resultsListModel = new DefaultListModel();

        String userInput = TextFieldThrowType.getText();

        try {
            if (!controller.validateUserInput(userInput)) {
                throw new HandledException(HandledException.ErrorCode.BAD_INPUT, "Wprowadzono błedne dane");
            }
            List<Integer> throwData = controller.parseUserInput(userInput);
            List<Integer> results = model.throwDice(throwData.get(0), throwData.get(1));
            
            //adding results to list model and setting model
            for (int i = 0; i < results.size(); ++i) {
                resultsListModel.addElement(results.get(i).toString());
            }
            ListResults.setModel(this.resultsListModel);
        } catch (HandledException e) { //display error message in modal
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ButtonThrowActionPerformed
   
    /**
     * This method is called on key press and should focus TextFieldThrowType
     */
        private static void handleKeyPress(KeyEvent evt, GUI gui) {
        // Check if the pressed key is the one you want to use to set focus
            if (evt.getKeyChar() == 'T' || evt.getKeyChar() == 't') {
                gui.TextFieldThrowType.requestFocusInWindow();
            }
    }
    
    /**
     * Main method of program.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Model model = new Model();
                Controller controller = new Controller(model);
                GUI gui = new GUI(model, controller, args);
                gui.setVisible(true);
            
                         // Add KeyListener to set focus on TextFieldThrowType when 'T' key is pressed
                gui.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyPressed(java.awt.event.KeyEvent evt) {
                        handleKeyPress(evt, gui);
                    }
                });
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonThrow;
    private javax.swing.JLabel LabelThrowType;
    private javax.swing.JList<String> ListResults;
    private javax.swing.JScrollPane ScrollableListResults;
    private javax.swing.JTextField TextFieldThrowType;
    // End of variables declaration//GEN-END:variables
}
